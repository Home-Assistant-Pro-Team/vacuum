########################################################
# bisogna aggiungere 
#  - input_boolean.aspirazione_robottino 
#  - input_boolean.lavaggio_robottino
# ad alexa poi basterà dire di accendere/avviare robot o robottino
########################################################

template:
  - select:
      - name: "Aggiungi o rimuovi stanza per prossimo lavaggio"
        state: >-
          {% from 'dreame.jinja' import entity_vacum %}
          {{ states('sensor.' ~ entity_vacum() ~ '_status') }}"
        options: >-
          {% from 'dreame.jinja' import dreame %}
          {{ (dreame()|from_json).keys()|list + ['RESET'] }}
        select_option:
          - event: customizations
            event_data:
              types: dreame_rooms
              rooms_select: "{{ option }}"

  - trigger:
      - platform: event
        event_type: customizations
        event_data:
          types: dreame_rooms
    sensor:
      - name: Lista stanze da pulire
        state: "{{ trigger.event.data.rooms_select }}"
        attributes:
          print_list_group: >-
            {% from 'dreame.jinja' import dreame %}
            {% set state_attra = state_attr('sensor.lista_stanze_da_pulire', 'print_list_group')  %}
            {% if trigger.event.data.rooms_select == 'RESET' %}
            {% else %}
              {% set id_rooms = (dreame()|from_json).get(trigger.event.data.rooms_select, 888 ) %}          
              {{ state_attra|list | select('ne', id_rooms)|list if id_rooms in state_attra else state_attra|list + id_rooms|list }}
            {% endif %}
          print_list_name: >-
            {% from 'dreame.jinja' import list_sensor_name %}
            {{ list_sensor_name(trigger.event.data.rooms_select, this.attributes.print_list_name) }}

input_boolean:
  aspirazione_robottino:
    name: Aspirazione robottino
  lavaggio_robottino:
    name: Lavaggio robottino

script:
  avvia_robottino:
    alias: Avvia robottino
    mode: single
    sequence:
      - alias: Aggiorna alexa
        action: alexa_media.update_last_called
      - variables:
          entity_vacum: >-
            {% from 'dreame.jinja' import entity_vacum %}
            {{ entity_vacum() }}
          alexa: "{{ states.media_player | selectattr('attributes.last_called', 'eq', true) | map(attribute='entity_id') | select('in', integration_entities('alexa_media')) | first }}"
      - alias: Attiva domanda alexa per stanze
        action: script.activate_alexa_actionable_notification
        data:
          text: "Dove vuoi passare il robot?"
          event_id: rooms_vacuum
          alexa_device: "{{ alexa }}"
      - alias: Attendi risposta ad alexa
        wait_for_trigger:
          - platform: event
            event_type: alexa_actionable_notification
            event_data:
              event_id: rooms_vacuum
      - alias: Cancella vecchie stanze da sensore lista stanze
        action: select.select_option
        target:
          entity_id: select.aggiungi_o_rimuovi_stanza_per_prossimo_lavaggio
        data:
          option: RESET
      - alias: >-
          IF: se non ottieni risposta 
          THEN: interrompi pulizia
          ELSE: continua richiesta di lavaggio
        if: "{{wait.trigger.event.data.event_response_type == 'ResponseNone' }}"
        then:
          - alias: Invia notifica ad Alexa
            action: notify.alexa_media
            data:
              target: "{{ alexa }}"
              data:
                method: spoken
              message: "Pulizia non avviata"
        else:
          - alias: Aggiungi le stanze al sensore lista stanze
            repeat:
              for_each: >-
                {% set stanze_originali = state_attr('select.aggiungi_o_rimuovi_stanza_per_prossimo_lavaggio','options') %}
                {% set parole_alexa = (wait.trigger.event.data.event_response | lower).split() %}
                {% set output = namespace(stanze_trovate=[], posizioni_usate=[]) %}
                {% for indice_parola in range(parole_alexa | length) %}
                    {% for indice_combinazione in range(parole_alexa | length, indice_parola, -1) %}
                      {% set stanza_potenziale = parole_alexa[indice_parola:indice_combinazione] | join(' ') %}
                      {% for stanza_originale in stanze_originali if stanza_potenziale == stanza_originale | lower %}
                        {% set output.stanze_trovate = output.stanze_trovate + [stanza_originale] %}
                        {% set output.posizioni_usate = output.posizioni_usate + range(indice_parola, indice_combinazione) | list %}
                      {% endfor %}
                      {% if output.posizioni_usate | length > 0 and (output.posizioni_usate | last) >= indice_combinazione - 1 %}{% break %}{% endif %}
                    {% endfor %}
                {% endfor %}
                {{ output.stanze_trovate | unique | list }}
              sequence:
                - action: select.select_option
                  target:
                    entity_id: select.aggiungi_o_rimuovi_stanza_per_prossimo_lavaggio
                  data:
                    option: "{{ repeat.item | capitalize }}"
                - delay:
                    milliseconds: 250
          - alias: >-
              IF: sensore abbia almeno una stanza impostata
              THEN: Avvia robot
              ELSE: avvisa di errore in compilazione
            if:
              - "{{states('sensor.lista_stanze_da_pulire') in state_attr('select.aggiungi_o_rimuovi_stanza_per_prossimo_lavaggio','options') }}"
              - "{{ states('sensor.lista_stanze_da_pulire') != 'RESET' }}"
            then:
              - alias: Invia notifica ad Alexa
                action: notify.alexa_media
                data:
                  target: "{{ alexa }}"
                  data:
                    method: spoken
                  message: >-
                    {%- set rooms = state_attr('sensor.lista_stanze_da_pulire', 'print_list_name') %}
                    Inizio a pulire {{ rooms |join(', ') | regex_replace(',([^,]*)$',' e\\1') if rooms | length > 0 else rooms}}
              - alias: Avvia pulizia robot
                action: dreame_vacuum.vacuum_clean_segment
                data:
                  segments: "{{ state_attr('sensor.lista_stanze_da_pulire', 'print_list_group') }}"
                target:
                  entity_id: "{{ 'vacuum.' ~ entity_vacum }}"
            else:
              - alias: Invia notifica ad Alexa
                action: notify.alexa_media
                data:
                  target: "{{ alexa }}"
                  data:
                    method: spoken
                  message: "Non è possibile avviare la pulizia. Stanza non rilevata."

automation:
  - alias: "Elettrodomestici: lavaggio dreame con alexa"
    id: "conferma_alexa_dreame"
    mode: restart
    trigger:

      - platform: state
        entity_id:
          - input_boolean.aspirazione_robottino
          - input_boolean.lavaggio_robottino
        from: "off"
        to: "on"
    action:
      - alias: Metti boolean in off
        action: input_boolean.turn_off
        target:
          entity_id:
            - input_boolean.aspirazione_robottino
            - input_boolean.lavaggio_robottino
      - variables:
          entity_vacum: >-
            {% from 'dreame.jinja' import entity_vacum %}
            {{ entity_vacum() }}
          alexa: "{{ states.media_player | selectattr('attributes.last_called', 'eq', true) | map(attribute='entity_id') | select('in', integration_entities('alexa_media')) | first }}"

      - alias: "Se robot non sta pulendo, avvisa che già in funzione, altrimenti imposta modalità di pulizia"
        if: "{{ not is_state('sensor.' ~ entity_vacum ~ '_cleaning_progress', 'unavailable') }}"
        then:
          - alias: Invia notifica ad Alexa
            action: notify.alexa_media
            data:
              target: "{{ alexa }}"
              data:
                method: spoken
              message: "Non è possibile avviare la pulizia."
        else:
          - alias: Se attivato da aspirazione_robottino imposta aspirazione, altrimenti imposta lavaggio
            if: "{{ trigger.entity_id == 'input_boolean.aspirazione_robottino' }}"
            then:
              - alias: >-
                  IF: Se cleangenius spento 
                  THEN: imposta solo pulizia
                  ELSE: Spegni cleangenius ed imposta solo pulizia
                if:
                  - "{{ is_state('select.' ~ entity_vacum ~ '_cleangenius', 'off') }}"
                then:
                  - action: select.select_option
                    target:
                      entity_id: "{{'select.' ~ entity_vacum ~ '_cleaning_mode'}}"
                    data:
                      option: "sweeping"
                  - alias: Attiva script selezione stanza
                    action: script.avvia_robottino
                else:
                  - action: select.select_option
                    target:
                      entity_id: "{{'select.' ~ entity_vacum ~ '_cleangenius'}}"
                    data:
                      option: "off"
                  - delay: "00:00:03"
                  - action: select.select_option
                    target:
                      entity_id: "{{'select.' ~ entity_vacum ~ '_cleaning_mode'}}"
                    data:
                      option: "sweeping"
                  - alias: Attiva script selezione stanza
                    action: script.avvia_robottino
            else:
              - alias: Gestisci pulizia completa anche con dispositivi che non hanno cleangenius
                if:
                  - "{{ is_state('select.' ~ entity_vacum ~ '_cleangenius', 'unknown') }}"
                then:
                  - action: select.select_option
                    target:
                      entity_id: "{{'select.' ~ entity_vacum ~ '_cleaning_mode'}}"
                    data:
                      option: "sweeping_and_mopping"
                  - alias: Attiva script selezione stanza
                    action: script.avvia_robottino                      
                else:
                  - action: select.select_option
                    target:
                      entity_id: "{{'select.' ~ entity_vacum ~ '_cleangenius'}}"
                    data:
                      option: "routine_cleaning"
                  - alias: Attiva script selezione stanza
                    action: script.avvia_robottino
